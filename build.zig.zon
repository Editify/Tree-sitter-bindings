const std = @import("std");
const json = @import("std").json;

const flags = [_][]const u8{
    "-fno-sanitize=undefined",
};

pub fn build(b: *std.Build) void {
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});

    const lib = b.addStaticLibrary(.{
        .name = "tree-sitter",
        .target = target,
        .optimize = optimize,
    });

    lib.linkLibC();
    lib.linkLibCpp();
    lib.addIncludePath(b.path("tree-sitter/lib/include"));
    lib.addIncludePath(b.path("tree-sitter/lib/src"));
    lib.addCSourceFiles(.{ .files = &.{"tree-sitter/lib/src/lib.c"}, .flags = &flags });
    readJson(b, lib);

    b.installArtifact(lib);
    lib.installHeadersDirectory(b.path("tree-sitter/lib/include/tree_sitter"), "tree_sitter", .{});

    const mod = b.addModule("treez", .{
        .root_source_file = b.path("treez/treez.zig"),
    });
    mod.linkLibrary(lib);
}

fn readJson(b: *std.Build, lib: *std.Build.Step.Compile) void {
    const json_location = "./modules.json";

    //TODO: Read module.json and add module as install
}

// fn addParser(b: *std.Build, lib: *std.Build.Step.Compile, comptime lang: []const u8, comptime subdir: ?[]const u8) void {
//     const basedir = "tree-sitter-" ++ lang;
//     const srcdir = if (subdir) |sub| basedir ++ "/" ++ sub ++ "/src" else basedir ++ "/src";
//     const qrydir = if (subdir) |sub| if (exists(b, basedir ++ "/" ++ sub ++ "/queries")) basedir ++ "/" ++ sub ++ "/queries" else basedir ++ "/queries" else basedir ++ "/queries";
//     const parser = srcdir ++ "/parser.c";
//     const scanner = srcdir ++ "/scanner.c";
//     const scanner_cc = srcdir ++ "/scanner.cc";
//
//     lib.addCSourceFiles(.{ .files = &.{parser}, .flags = &flags });
//     if (exists(b, scanner_cc))
//         lib.addCSourceFiles(.{ .files = &.{scanner_cc}, .flags = &flags });
//     if (exists(b, scanner))
//         lib.addCSourceFiles(.{ .files = &.{scanner}, .flags = &flags });
//     lib.addIncludePath(b.path(srcdir));
//
//     if (exists(b, qrydir)) {
//         b.installDirectory(.{
//             .source_dir = b.path(qrydir),
//             .include_extensions = &[_][]const u8{".scm"},
//             .install_dir = .{ .custom = "queries" },
//             .install_subdir = lang,
//         });
//     }
// }
//
// fn exists(b: *std.Build, path: []const u8) bool {
//     std.fs.cwd().access(b.pathFromRoot(path), .{ .mode = .read_only }) catch return false;
//     return true;
// }
